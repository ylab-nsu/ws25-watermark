name: 🔍 CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: 🏗️ Build & Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: 🔧 Install dependencies
      run: make dev-install

    - name: ✅ Verify installation
      run: poetry run python -c "import watermark_framework; print('Package installed successfully')"

  lint-and-typecheck:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: 🔧 Install dependencies
      run: make dev-install

    - name: 🎨 Run linting
      run: make lint

    - name: 🏷️ Run type checking
      run: make type-check

  tests:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: 🔧 Install dependencies
      run: make dev-install

    - name: 🧪 Run tests with coverage
      run: |
        echo "Running tests with coverage..."
        poetry run coverage run -m pytest

        echo ""
        echo "📊 Coverage Summary:"
        poetry run coverage report --show-missing

        echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        poetry run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY