[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "watermark_framework"
version = "0.0.1"
description = "A comprehensive framework for embedding and extracting hidden messages in ELF binary files"
authors = ["MKSP"]
readme = "README.md"
packages = [{ include = "watermark_framework" }]

[tool.poetry.scripts]
watermark = "watermark_framework.cli.main:main"

[tool.poetry.dependencies]
python = "^3.11"
pyelftools = "^0.31"
capstone = "^5.0.5"
keystone-engine = "^0.9.2"
bitstruct = "^8.20.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.9.4"
mypy = "^1.6.1"
pytest = "^8.0.0"     # Update from 6.2.5 to 8.x
pytest-cov = "^4.0.0"
coverage = "^7.0.0"

[tool.ruff]
line-length = 120
target-version = "py311"
output-format = "grouped"
exclude = ["tests", "tests/*", "**/tests/**"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "C4",  # flake8-comprehensions
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
    "F401",
    "I001",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["watermark_framework"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# Ignore missing library stubs for external dependencies
[[tool.mypy.overrides]]
module = ["capstone", "capstone.*", "bitstruct"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["watermark_framework"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
skip_empty = true
